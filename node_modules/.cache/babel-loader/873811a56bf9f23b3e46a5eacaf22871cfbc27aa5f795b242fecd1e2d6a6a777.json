{"ast":null,"code":"var _jsxFileName = \"/Users/alexrumyantsev/WebstormProjects/currency-converter/client/src/CurrencyRatesToUSD.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CurrencyRatesToUSD = () => {\n  _s();\n  const [rates, setRates] = useState({\n    USD: 1,\n    // Поскольку мы хотим конвертировать к доллару, курс доллара к доллару всегда будет 1\n    EUR: null,\n    RUB: null,\n    BYN: null\n  });\n  useEffect(() => {\n    const fetchRates = async () => {\n      try {\n        const currencies = ['EUR', 'RUB', 'USD', 'BYN'];\n        for (let currency of currencies) {\n          const response = await fetch(`https://api.nbrb.by/exrates/rates/${currency}?parammode=2`);\n          const data = await response.json();\n          if (currency !== 'USD') {\n            setRates(prevState => ({\n              ...prevState,\n              [currency]: 1 / data.Cur_OfficialRate * rates.USD // Конвертация в курс к доллару\n            }));\n          }\n        }\n      } catch (error) {\n        console.error('Ошибка при получении курсов:', error);\n      }\n    };\n    fetchRates();\n  }, [rates.USD]); // Эффект запустится один раз при монтировании компонента\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.entries(rates).map(([currency, rate]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [currency, \": \", rate]\n    }, currency, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(CurrencyRatesToUSD, \"8HY+0Iz1+xEyG6sPMNzfsOAqqAQ=\");\n_c = CurrencyRatesToUSD;\nexport default CurrencyRatesToUSD;\nvar _c;\n$RefreshReg$(_c, \"CurrencyRatesToUSD\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CurrencyRatesToUSD","_s","rates","setRates","USD","EUR","RUB","BYN","fetchRates","currencies","currency","response","fetch","data","json","prevState","Cur_OfficialRate","error","console","children","Object","entries","map","rate","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alexrumyantsev/WebstormProjects/currency-converter/client/src/CurrencyRatesToUSD.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst CurrencyRatesToUSD = () => {\n    const [rates, setRates] = useState({\n        USD: 1, // Поскольку мы хотим конвертировать к доллару, курс доллара к доллару всегда будет 1\n        EUR: null,\n        RUB: null,\n        BYN: null\n    });\n\n    useEffect(() => {\n        const fetchRates = async () => {\n            try {\n                const currencies = ['EUR', 'RUB', 'USD', 'BYN'];\n\n                for (let currency of currencies) {\n                    const response = await fetch(`https://api.nbrb.by/exrates/rates/${currency}?parammode=2`);\n                    const data = await response.json();\n\n                    if (currency !== 'USD') {\n                        setRates(prevState => ({\n                            ...prevState,\n                            [currency]: (1 / data.Cur_OfficialRate) * rates.USD // Конвертация в курс к доллару\n                        }));\n                    }\n                }\n            } catch (error) {\n                console.error('Ошибка при получении курсов:', error);\n            }\n        };\n\n        fetchRates();\n    }, [rates.USD]); // Эффект запустится один раз при монтировании компонента\n\n    return (\n        <div>\n            {Object.entries(rates).map(([currency, rate]) => (\n                <div key={currency}>\n                    {currency}: {rate}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default CurrencyRatesToUSD;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC;IAC/BQ,GAAG,EAAE,CAAC;IAAE;IACRC,GAAG,EAAE,IAAI;IACTC,GAAG,EAAE,IAAI;IACTC,GAAG,EAAE;EACT,CAAC,CAAC;EAEFV,SAAS,CAAC,MAAM;IACZ,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,MAAMC,UAAU,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;QAE/C,KAAK,IAAIC,QAAQ,IAAID,UAAU,EAAE;UAC7B,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,qCAAoCF,QAAS,cAAa,CAAC;UACzF,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;UAElC,IAAIJ,QAAQ,KAAK,KAAK,EAAE;YACpBP,QAAQ,CAACY,SAAS,KAAK;cACnB,GAAGA,SAAS;cACZ,CAACL,QAAQ,GAAI,CAAC,GAAGG,IAAI,CAACG,gBAAgB,GAAId,KAAK,CAACE,GAAG,CAAC;YACxD,CAAC,CAAC,CAAC;UACP;QACJ;MACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACxD;IACJ,CAAC;IAEDT,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACN,KAAK,CAACE,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEjB,oBACIL,OAAA;IAAAoB,QAAA,EACKC,MAAM,CAACC,OAAO,CAACnB,KAAK,CAAC,CAACoB,GAAG,CAAC,CAAC,CAACZ,QAAQ,EAAEa,IAAI,CAAC,kBACxCxB,OAAA;MAAAoB,QAAA,GACKT,QAAQ,EAAC,IAAE,EAACa,IAAI;IAAA,GADXb,QAAQ;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEb,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAC1B,EAAA,CAzCID,kBAAkB;AAAA4B,EAAA,GAAlB5B,kBAAkB;AA2CxB,eAAeA,kBAAkB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}