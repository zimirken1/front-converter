{"ast":null,"code":"var _jsxFileName = \"/Users/alexrumyantsev/WebstormProjects/currency-converter/client/src/components/CurrencyConverter.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { fetchAllCurrencies, convertCurrency } from '../http/currencyAPI';\nimport '../styles/ConverterPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CurrencyConverter = () => {\n  _s();\n  const initialCurrencies = ['USD', 'EUR', 'RUB', 'BYN'];\n  const [values, setValues] = useState({\n    USD: '1',\n    EUR: '',\n    RUB: '',\n    BYN: ''\n  });\n  const [availableCurrencies, setAvailableCurrencies] = useState(initialCurrencies);\n  const [allCurrencies, setAllCurrencies] = useState([]);\n  const [selectedCurrency, setSelectedCurrency] = useState('');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const allCurrenciesData = await fetchAllCurrencies();\n        setAllCurrencies(allCurrenciesData.map(currency => currency.Cur_Abbreviation));\n        const initialConversions = await convertCurrency('USD', '1');\n        setValues(prevValues => ({\n          ...prevValues,\n          ...initialConversions\n        }));\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleInputChange = useCallback(async (currency, inputValue) => {\n    if (!/^[0-9.,]*$/.test(inputValue)) {\n      return;\n    }\n    if (inputValue === '' || inputValue === undefined) {\n      setValues(prevValues => ({\n        ...prevValues,\n        [currency]: ''\n      }));\n      return;\n    }\n    try {\n      const baseCurrencyValue = await convertCurrency(currency, inputValue, 'USD');\n      const allConversions = await convertCurrency('USD', baseCurrencyValue.USD);\n      setValues(prevValues => ({\n        ...prevValues,\n        ...allConversions\n      }));\n    } catch (error) {\n      console.error(\"Error converting currency:\", error);\n    }\n  }, []);\n  const addCurrency = async () => {\n    if (selectedCurrency && !availableCurrencies.includes(selectedCurrency)) {\n      setAvailableCurrencies(prevCurrencies => [...prevCurrencies, selectedCurrency]);\n      setValues(prevValues => ({\n        ...prevValues,\n        [selectedCurrency]: ''\n      }));\n      try {\n        const response = await convertCurrency('USD', values.USD);\n        setValues(prevValues => ({\n          ...prevValues,\n          [selectedCurrency]: response[selectedCurrency]\n        }));\n      } catch (error) {\n        console.error(\"Error converting for new currency:\", error);\n      }\n    }\n  };\n  const removeCurrency = currencyToRemove => {\n    setAvailableCurrencies(prevCurrencies => prevCurrencies.filter(currency => currency !== currencyToRemove));\n    setValues(prevValues => {\n      const updatedValues = {\n        ...prevValues\n      };\n      delete updatedValues[currencyToRemove];\n      return updatedValues;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"currency-converter\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Currency Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [availableCurrencies.map(currency => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [currency, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              pattern: \"^\\\\d*\\\\.?\\\\d*$\",\n              value: values[currency] || '',\n              onChange: e => handleInputChange(currency, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: !initialCurrencies.includes(currency) && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => removeCurrency(currency),\n              children: \"x\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)]\n        }, currency, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedCurrency,\n              onChange: e => setSelectedCurrency(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select currency\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 29\n              }, this), allCurrencies.filter(currency => !availableCurrencies.includes(currency)).map(currency => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: currency,\n                children: currency\n              }, currency, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 33\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"2\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: addCurrency,\n              children: \"Add Currency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(CurrencyConverter, \"G//ol8SFlq779u/cdPb3UutMyPo=\");\n_c = CurrencyConverter;\nexport default CurrencyConverter;\nvar _c;\n$RefreshReg$(_c, \"CurrencyConverter\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","fetchAllCurrencies","convertCurrency","jsxDEV","_jsxDEV","CurrencyConverter","_s","initialCurrencies","values","setValues","USD","EUR","RUB","BYN","availableCurrencies","setAvailableCurrencies","allCurrencies","setAllCurrencies","selectedCurrency","setSelectedCurrency","fetchData","allCurrenciesData","map","currency","Cur_Abbreviation","initialConversions","prevValues","error","console","handleInputChange","inputValue","test","undefined","baseCurrencyValue","allConversions","addCurrency","includes","prevCurrencies","response","removeCurrency","currencyToRemove","filter","updatedValues","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","pattern","value","onChange","e","target","onClick","colSpan","_c","$RefreshReg$"],"sources":["/Users/alexrumyantsev/WebstormProjects/currency-converter/client/src/components/CurrencyConverter.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { fetchAllCurrencies, convertCurrency } from '../http/currencyAPI';\nimport '../styles/ConverterPage.css'\n\nconst CurrencyConverter = () => {\n    const initialCurrencies = ['USD', 'EUR', 'RUB', 'BYN'];\n\n    const [values, setValues] = useState({\n        USD: '1',\n        EUR: '',\n        RUB: '',\n        BYN: ''\n    });\n    const [availableCurrencies, setAvailableCurrencies] = useState(initialCurrencies);\n    const [allCurrencies, setAllCurrencies] = useState([]);\n    const [selectedCurrency, setSelectedCurrency] = useState('');\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const allCurrenciesData = await fetchAllCurrencies();\n                setAllCurrencies(allCurrenciesData.map(currency => currency.Cur_Abbreviation));\n\n                const initialConversions = await convertCurrency('USD', '1');\n                setValues(prevValues => ({\n                    ...prevValues,\n                    ...initialConversions\n                }));\n            } catch (error) {\n                console.error(\"Error fetching data:\", error);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    const handleInputChange = useCallback(async (currency, inputValue) => {\n        if (!/^[0-9.,]*$/.test(inputValue)) {\n            return;\n        }\n\n        if (inputValue === '' || inputValue === undefined) {\n            setValues(prevValues => ({ ...prevValues, [currency]: '' }));\n            return;\n        }\n\n        try {\n            const baseCurrencyValue = await convertCurrency(currency, inputValue, 'USD');\n            const allConversions = await convertCurrency('USD', baseCurrencyValue.USD);\n            setValues(prevValues => ({\n                ...prevValues,\n                ...allConversions\n            }));\n        } catch (error) {\n            console.error(\"Error converting currency:\", error);\n        }\n    }, []);\n\n\n\n    const addCurrency = async () => {\n        if (selectedCurrency && !availableCurrencies.includes(selectedCurrency)) {\n            setAvailableCurrencies(prevCurrencies => [...prevCurrencies, selectedCurrency]);\n            setValues(prevValues => ({ ...prevValues, [selectedCurrency]: '' }));\n\n            try {\n                const response = await convertCurrency('USD', values.USD);\n                setValues(prevValues => ({\n                    ...prevValues,\n                    [selectedCurrency]: response[selectedCurrency]\n                }));\n            } catch (error) {\n                console.error(\"Error converting for new currency:\", error);\n            }\n        }\n    };\n\n    const removeCurrency = (currencyToRemove) => {\n        setAvailableCurrencies(prevCurrencies => prevCurrencies.filter(currency => currency !== currencyToRemove));\n        setValues(prevValues => {\n            const updatedValues = { ...prevValues };\n            delete updatedValues[currencyToRemove];\n            return updatedValues;\n        });\n    };\n\n    return (\n        <div className=\"currency-converter\">\n            <h2>Currency Converter</h2>\n            <table>\n                <tbody>\n                {availableCurrencies.map(currency => (\n                    <tr key={currency}>\n                        <td><label>{currency}:</label></td>\n                        <td>\n                            <input\n                                type=\"text\"\n                                pattern=\"^\\d*\\.?\\d*$\"\n                                value={values[currency] || ''}\n                                onChange={e => handleInputChange(currency, e.target.value)}\n                            />\n                        </td>\n                        <td>\n                            {!initialCurrencies.includes(currency) && (\n                                <button onClick={() => removeCurrency(currency)}>x</button>\n                            )}\n                        </td>\n                    </tr>\n                ))}\n                <tr>\n                    <td>\n                        <select value={selectedCurrency} onChange={e => setSelectedCurrency(e.target.value)}>\n                            <option value=\"\">Select currency</option>\n                            {allCurrencies.filter(currency => !availableCurrencies.includes(currency)).map(currency => (\n                                <option key={currency} value={currency}>\n                                    {currency}\n                                </option>\n                            ))}\n                        </select>\n                    </td>\n                    <td colSpan=\"2\">\n                        <button onClick={addCurrency}>Add Currency</button>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n\n    );\n}\n\nexport default CurrencyConverter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}