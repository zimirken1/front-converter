{"ast":null,"code":"var _jsxFileName = \"/Users/alexrumyantsev/WebstormProjects/currency-converter/client/src/components/CurrencyList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CurrencyInput from '../components/CurrencyInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CurrencyList() {\n  _s();\n  const [currencies, setCurrencies] = useState([]);\n  const [values, setValues] = useState({\n    USD: 1\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch('https://api.nbrb.by/exrates/rates?periodicity=0').then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch data');\n      }\n      return response.json();\n    }).then(data => {\n      const relevantCurrencies = data.filter(item => ['USD', 'EUR', 'RUB', 'BYN'].includes(item.Cur_Abbreviation));\n      setCurrencies(relevantCurrencies);\n      setIsLoading(false);\n    }).catch(error => {\n      setError(error.message);\n      setIsLoading(false);\n    });\n  }, []);\n  useEffect(() => {\n    handleInputChange({\n      target: {\n        value: 1\n      }\n    }, 'USD');\n  }, [currencies]);\n  function handleInputChange(e, abbreviation) {\n    const newValue = parseFloat(e.target.value || 0);\n    const updatedValues = {};\n    for (const currency of currencies) {\n      const usdRate = currencies.find(cur => cur.Cur_Abbreviation === 'USD').Cur_OfficialRate;\n      const currentRate = currency.Cur_OfficialRate;\n      if (abbreviation === 'USD') {\n        updatedValues[currency.Cur_Abbreviation] = newValue * (currentRate / usdRate);\n      } else if (abbreviation === currency.Cur_Abbreviation) {\n        if (abbreviation === 'BYN') {\n          updatedValues['USD'] = 1 / (newValue / usdRate);\n          updatedValues['BYN'] = newValue;\n        } else {\n          updatedValues['USD'] = newValue / (currentRate / usdRate);\n          updatedValues[currency.Cur_Abbreviation] = newValue;\n        }\n      } else {\n        const relativeRate = currentRate / currencies.find(cur => cur.Cur_Abbreviation === abbreviation).Cur_OfficialRate;\n        updatedValues[currency.Cur_Abbreviation] = newValue * relativeRate;\n      }\n    }\n    setValues(updatedValues);\n  }\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 27\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: currencies.map(currency => /*#__PURE__*/_jsxDEV(CurrencyInput, {\n      abbreviation: currency.Cur_Abbreviation,\n      value: values[currency.Cur_Abbreviation],\n      onChange: handleInputChange\n    }, currency.Cur_ID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_s(CurrencyList, \"tdyDo5LdfQVPyYOZ/nfoowvxAmc=\");\n_c = CurrencyList;\nexport default CurrencyList;\nvar _c;\n$RefreshReg$(_c, \"CurrencyList\");","map":{"version":3,"names":["React","useState","useEffect","CurrencyInput","jsxDEV","_jsxDEV","CurrencyList","_s","currencies","setCurrencies","values","setValues","USD","isLoading","setIsLoading","error","setError","fetch","then","response","ok","Error","json","data","relevantCurrencies","filter","item","includes","Cur_Abbreviation","catch","message","handleInputChange","target","value","e","abbreviation","newValue","parseFloat","updatedValues","currency","usdRate","find","cur","Cur_OfficialRate","currentRate","relativeRate","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onChange","Cur_ID","_c","$RefreshReg$"],"sources":["/Users/alexrumyantsev/WebstormProjects/currency-converter/client/src/components/CurrencyList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CurrencyInput from '../components/CurrencyInput';\n\nfunction CurrencyList() {\n    const [currencies, setCurrencies] = useState([]);\n    const [values, setValues] = useState({ USD: 1 });\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        fetch('https://api.nbrb.by/exrates/rates?periodicity=0')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Failed to fetch data');\n                }\n                return response.json();\n            })\n            .then(data => {\n                const relevantCurrencies = data.filter(item =>\n                    ['USD', 'EUR', 'RUB', 'BYN'].includes(item.Cur_Abbreviation)\n                );\n                setCurrencies(relevantCurrencies);\n                setIsLoading(false);\n            })\n            .catch(error => {\n                setError(error.message);\n                setIsLoading(false);\n            });\n    }, []);\n\n    useEffect(() => {\n        handleInputChange({ target: { value: 1 } }, 'USD');\n    }, [currencies]);\n\n    function handleInputChange(e, abbreviation) {\n        const newValue = parseFloat(e.target.value || 0);\n        const updatedValues = {};\n\n        for (const currency of currencies) {\n            const usdRate = currencies.find(cur => cur.Cur_Abbreviation === 'USD').Cur_OfficialRate;\n            const currentRate = currency.Cur_OfficialRate;\n\n            if (abbreviation === 'USD') {\n                updatedValues[currency.Cur_Abbreviation] = newValue * (currentRate / usdRate);\n            } else if (abbreviation === currency.Cur_Abbreviation) {\n                if (abbreviation === 'BYN') {\n                    updatedValues['USD'] = 1 / (newValue / usdRate);\n                    updatedValues['BYN'] = newValue;\n                } else {\n                    updatedValues['USD'] = newValue / (currentRate / usdRate);\n                    updatedValues[currency.Cur_Abbreviation] = newValue;\n                }\n            } else {\n                const relativeRate = currentRate / currencies.find(cur => cur.Cur_Abbreviation === abbreviation).Cur_OfficialRate;\n                updatedValues[currency.Cur_Abbreviation] = newValue * relativeRate;\n            }\n        }\n\n        setValues(updatedValues);\n    }\n\n    if (isLoading) return <p>Loading...</p>;\n    if (error) return <p>{error}</p>;\n\n    return (\n        <div>\n            {currencies.map(currency => (\n                <CurrencyInput\n                    key={currency.Cur_ID}\n                    abbreviation={currency.Cur_Abbreviation}\n                    value={values[currency.Cur_Abbreviation]}\n                    onChange={handleInputChange}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default CurrencyList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}